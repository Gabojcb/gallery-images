import * as dependency_0 from '@beyond-js/kernel/bundle';
import * as dependency_1 from 'react';
import * as dependency_2 from '@beyond-js/kernel/routing';
import * as dependency_3 from '@bgroup/ui/icons';
import * as dependency_4 from '@bgroup/ui/spinner';
import * as dependency_5 from '@beyond-js/kernel/styles';

const {Bundle: __Bundle} = dependency_0;
const __pkg = new __Bundle({"module":{"vspecifier":"@bgroup/ui@0.0.34/form"},"type":"code","name":"form"}, import.meta.url).package();;

__pkg.dependencies.update([['react', dependency_1],['@beyond-js/kernel/routing', dependency_2],['@bgroup/ui/icons', dependency_3],['@bgroup/ui/spinner', dependency_4],['@beyond-js/kernel/styles', dependency_5]]);

brequire('@beyond-js/kernel/styles').styles.register('@bgroup/ui@0.0.34/form')


const ims = new Map();

/************************
INTERNAL MODULE: ./button
************************/

ims.set('./button', {hash: 2952778037, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondButton = BeyondButton;
var _react = require("react");
var _routing = require("@beyond-js/kernel/routing");
var _icons = require("@bgroup/ui/icons");
var _spinner = require("@bgroup/ui/spinner");
;
/*bundle*/function BeyondButton(props) {
  const {
    className,
    onClick,
    data,
    label,
    children,
    icon,
    loading,
    colorSpinner
  } = props;
  const onClickButton = event => {
    if (onClick && typeof onClick === 'function') {
      onClick(event);
      return;
    }
    if (props.navigate) _routing.routing.pushState(`${props.navigate}`);
  };
  props.title ? props['data-tippy-content'] = props.title : null;
  const properties = {
    ...props,
    type: !!props.type ? props.type : 'button'
  };
  if (data) {
    let properties = Object.keys(data);
    properties.map(entry => props[`data-${entry}`] = data[entry]);
  }
  let cls = className ? `${className} beyond-button` : "beyond-button";
  cls += icon ? " has-icon" : "";
  delete properties.label;
  delete properties.icon;
  delete properties.children;
  delete properties.className;
  delete properties.loading;
  delete properties.colorSpinner;
  return _react.default.createElement("button", {
    className: cls,
    ...properties,
    onClick: onClickButton
  }, icon && _react.default.createElement(_icons.BeyondIcon, {
    icon: icon
  }), label, loading ? _react.default.createElement(_spinner.BeyondSpinner, {
    color: colorSpinner ?? "var(--primary)"
  }) : children);
}
}});

/**************************
INTERNAL MODULE: ./checkbox
**************************/

ims.set('./checkbox', {hash: 1973127589, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondCheckbox = void 0;
var React = require("react");
;
/*bundle*/const BeyondCheckbox = (0, React.forwardRef)((props, ref) => {
  const {
    checked,
    name,
    disabled,
    className,
    onChange,
    label
  } = props;
  const [state, setState] = (0, React.useState)({
    checked: !!checked
  });
  const handleChange = event => {
    setState({
      checked: !checked
    });
    onChange && onChange(event);
  };
  let cls = `beyond-checkbox ${className ? className : ""}`;
  cls += disabled ? " disabled" : "";
  const properties = Object.assign({}, props);
  delete properties.className;
  delete properties.checked;
  delete properties.name;
  delete properties.onChange;
  return React.createElement(React.Fragment, null, React.createElement("div", {
    className: cls
  }, React.createElement("input", {
    style: {
      display: "none"
    },
    ref: ref,
    type: "checkbox",
    className: "inp-cbx",
    id: name,
    name: name,
    checked: checked ?? state.checked,
    onChange: handleChange,
    ...properties
  }), React.createElement("label", {
    className: "cbx",
    htmlFor: name
  }, React.createElement("span", null, React.createElement("svg", {
    width: "12px",
    height: "9px",
    viewBox: "0 0 12 9"
  }, React.createElement("polyline", {
    points: "1 5 4 8 11 1"
  }))), React.createElement("span", null, label))));
});
exports.BeyondCheckbox = BeyondCheckbox;
}});

/**********************
INTERNAL MODULE: ./form
**********************/

ims.set('./form', {hash: 212622146, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondForm = BeyondForm;
var _react = require("react");
/*bundle*/function BeyondForm(props) {
  const onSubmit = event => {
    event.preventDefault();
    event.stopPropagation();
    props.onSubmit(event);
  };
  const properties = Object.assign({}, props);
  delete properties.onSubmit;
  return _react.default.createElement("form", {
    onSubmit: onSubmit,
    ...properties
  }, props.children);
}
;
}});

/***********************
INTERNAL MODULE: ./input
***********************/

ims.set('./input', {hash: 1841520349, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondInput = BeyondInput;
var React = require("react");
var _icons = require("@bgroup/ui/icons");
var _spinner = require("@bgroup/ui/spinner");
;
/*bundle*/function BeyondInput(props) {
  const input = (0, React.useRef)(null);
  const [state, setState] = (0, React.useState)({
    value: props.value ?? "",
    errorMessage: props.errorMessage ? props.errorMessage : "Formato incorrecto",
    lengthMessage: "Cantidad mÃ¡xima: ",
    emptyMessage: "Este campo es requerido",
    type: props.type ?? "text"
  });
  const handleChange = event => {
    if (!!props.onChange && typeof props.onChange === "function") props.onChange(event);
    setState({
      ...state,
      _hasError: false,
      value: event.target.value
    });
  };
  const getError = hasError => {
    if (!state._hasError && !hasError) return;
    let errorMessage = state.emptyMessage;
    if (hasError || input.current.value !== "") errorMessage = props.errorMessage ? props.errorMessage : state.errorMessage;
    if (props.max && parseFloat(input.current.value) > parseInt(props.max)) {
      errorMessage = props.lengthMessage ? props.lengthMessage : state.lengthMessage + ` (max ${props.max})`;
    }
    return React.createElement("span", {
      className: "beyond-element-input-error"
    }, errorMessage);
  };
  const changeType = event => {
    event.stopPropagation();
    const target = event.currentTarget;
    setState({
      ...state,
      type: target.dataset.type
    });
  };
  const error = getError(props.hasError);
  let properties = {
    ...props
  };
  let cls = props.className ? `${props.className} beyond-element-input` : "beyond-element-input";
  cls += props.icon || props.loading || props.password || props.required ? " has-icon" : "";
  cls += props.disabled ? " disabled" : "";
  cls += props.hasError ? " error" : "";
  delete properties.className;
  delete properties.hasError;
  delete properties.errorMessage;
  delete properties.children;
  delete properties.icon;
  delete properties.label;
  delete properties.password;
  delete properties.loading;
  delete properties.colorSpinner;
  return React.createElement("div", {
    className: cls
  }, React.createElement(React.Fragment, null, props.icon && React.createElement(_icons.BeyondIcon, {
    icon: props.icon
  }), React.createElement("input", {
    ref: input,
    ...properties,
    name: props.name,
    onChange: handleChange,
    type: state.type,
    value: typeof props.value !== "undefined" ? props.value : state.value,
    placeholder: props.placeholder ?? " ",
    id: props.id ?? props.name
  }), props.children, error, props.label && React.createElement("label", {
    htmlFor: props.id ?? props.name
  }, props.label), props.loading && React.createElement(_spinner.BeyondSpinner, {
    color: props.colorSpinner ?? "var(--primary)"
  }), props.password && (state.type === "password" ? React.createElement(_icons.BeyondIconButton, {
    onClick: changeType,
    "data-type": "text",
    className: "eye",
    icon: "eye"
  }) : React.createElement(_icons.BeyondIconButton, {
    onClick: changeType,
    className: "eye",
    "data-type": "password",
    icon: "eye-slash"
  })), props.required && React.createElement("span", {
    className: "beyond-input__required-label"
  }, "(*)")));
}
}});

/***********************
INTERNAL MODULE: ./radio
***********************/

ims.set('./radio', {hash: 3215233530, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondRadio = BeyondRadio;
var _react = require("react");
/*bundle*/function BeyondRadio(props) {
  const input = (0, _react.useRef)();
  const onClick = event => {
    input.current.checked = true;
    if (!!props.onChange) props.onChange(event);
  };
  const properties = {
    ...props
  };
  delete properties.onChange;
  const cls = `beyond-element-radio ${properties.className ? properties.className : ""}`;
  return _react.default.createElement("div", {
    className: cls
  }, _react.default.createElement("input", {
    ref: input,
    ...properties,
    type: "radio",
    onChange: onClick
  }), properties.label && _react.default.createElement("label", {
    htmlFor: properties.id
  }, properties.label));
}
;
}});

/************************
INTERNAL MODULE: ./switch
************************/

ims.set('./switch', {hash: 430157124, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondSwitch = void 0;
var React = require("react");
;
/*bundle*/const BeyondSwitch = (0, React.forwardRef)((props, ref) => {
  const {
    value,
    checked,
    required,
    name,
    disabled,
    className,
    onChange,
    onClick
  } = props;
  const [state, setState] = (0, React.useState)({
    checked: !!checked
  });
  const handleChange = event => {
    setState({
      checked: !checked
    });
    onChange && onChange(event);
  };
  const handleClick = event => {
    onClick && onClick(event);
  };
  let cls = `beyond-element-switch ${className ? className : ""}`;
  cls += disabled ? " disabled" : "";
  const properties = Object.assign({}, props);
  delete properties.className;
  delete properties.disabled;
  delete properties.checked;
  delete properties.name;
  delete properties.required;
  delete properties.onChange;
  delete properties.onClick;
  delete properties.value;
  return React.createElement("div", {
    className: cls,
    onClick: handleClick,
    ...properties
  }, React.createElement("label", {
    className: "switch"
  }, React.createElement("input", {
    ref: ref,
    type: "checkbox",
    required: required,
    name: name,
    value: value,
    checked: checked ?? state.checked,
    disabled: disabled,
    onChange: handleChange,
    placeholder: name
  }), React.createElement("span", {
    className: "slider"
  })));
});
exports.BeyondSwitch = BeyondSwitch;
}});

/**************************
INTERNAL MODULE: ./textarea
**************************/

ims.set('./textarea', {hash: 2311693849, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondTextarea = BeyondTextarea;
var React = require("react");
;
/*bundle*/function BeyondTextarea(props) {
  const input = props.ref ?? (0, React.useRef)();
  const [state, setState] = (0, React.useState)({
    value: props.value ?? "",
    errorMessage: props.errorMessage ? props.errorMessage : "Formato incorrecto",
    lengthMessage: "Cantidad mÃ¡xima: ",
    emptyMessage: "Este campo es requerido"
  });
  const handleChange = event => {
    if (!!props.onChange && typeof props.onChange === "function") props.onChange(event);
    setState({
      ...state,
      _hasError: false,
      value: event.target.value
    });
  };
  const getError = hasError => {
    if (!state._hasError && !hasError) return;
    let errorMessage = state.emptyMessage;
    if (hasError || input.value !== "") errorMessage = props.errorMessage ? props.errorMessage : state.errorMessage;
    if (props.max && parseFloat(input.value) > parseInt(props.max)) {
      errorMessage = props.lengthMessage ? props.lengthMessage : state.lengthMessage + ` (max ${props.max})`;
    }
    return React.createElement("span", {
      className: "beyond-element-input-error"
    }, errorMessage);
  };
  const error = getError(props.hasError);
  let properties = {
    ...props
  };
  let cls = props.className ? `${props.className} beyond-element-textarea` : "beyond-element-textarea";
  cls += props.disabled ? " disabled" : "";
  cls += props.hasError ? " error" : "";
  delete properties.className;
  delete properties.hasError;
  delete properties.errorMessage;
  delete properties.children;
  delete properties.label;
  return React.createElement("div", {
    className: cls
  }, React.createElement(React.Fragment, null, React.createElement("textarea", {
    ref: input,
    ...properties,
    name: props.name,
    onChange: handleChange,
    value: typeof props.value !== "undefined" ? props.value : state.value,
    placeholder: props.placeholder ?? " "
  }), props.children, error, props.label && React.createElement("label", {
    htmlFor: props.id
  }, props.label), props.required && React.createElement("span", {
    className: "beyond-input__required-label"
  }, "(*)")));
}
}});

__pkg.exports.descriptor = [{"im":"./button","from":"BeyondButton","name":"BeyondButton"},{"im":"./checkbox","from":"BeyondCheckbox","name":"BeyondCheckbox"},{"im":"./form","from":"BeyondForm","name":"BeyondForm"},{"im":"./input","from":"BeyondInput","name":"BeyondInput"},{"im":"./radio","from":"BeyondRadio","name":"BeyondRadio"},{"im":"./switch","from":"BeyondSwitch","name":"BeyondSwitch"},{"im":"./textarea","from":"BeyondTextarea","name":"BeyondTextarea"}];

export let BeyondButton, BeyondCheckbox, BeyondForm, BeyondInput, BeyondRadio, BeyondSwitch, BeyondTextarea;

// Module exports
__pkg.exports.process = function({require, prop, value}) {
    (require || prop === 'BeyondButton') && (BeyondButton = require ? require('./button').BeyondButton : value);
    (require || prop === 'BeyondCheckbox') && (BeyondCheckbox = require ? require('./checkbox').BeyondCheckbox : value);
    (require || prop === 'BeyondForm') && (BeyondForm = require ? require('./form').BeyondForm : value);
    (require || prop === 'BeyondInput') && (BeyondInput = require ? require('./input').BeyondInput : value);
    (require || prop === 'BeyondRadio') && (BeyondRadio = require ? require('./radio').BeyondRadio : value);
    (require || prop === 'BeyondSwitch') && (BeyondSwitch = require ? require('./switch').BeyondSwitch : value);
    (require || prop === 'BeyondTextarea') && (BeyondTextarea = require ? require('./textarea').BeyondTextarea : value);

};
export const __beyond_pkg = __pkg;

export const hmr = new (function () {
    this.on = (event, listener) => void 0;
    this.off = (event, listener) => void 0;
});


__pkg.initialise(ims);
//# sourceMappingURL=form.browser.mjs.map