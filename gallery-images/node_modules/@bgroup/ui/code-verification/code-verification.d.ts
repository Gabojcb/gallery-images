/************
Processor: ts
************/

import * as dependency_0 from 'react';

// FILE: code-input.d.tsx
declare namespace ns_codeinput {
    /// <reference types="react" />
    type props = {
        length?: number;
        onCodeFull?: (e: string) => void;
        className?: string;
        onlyNumber?: boolean;
        reset: any;
    };
    /**
     * It's a React component that takes a length prop and an onCodeFull prop. It renders an array of
     * inputs, each of which is limited to one character. When the user enters a character, the component
     * updates the state with the character and focuses the next input. When the user presses backspace,
     * the component removes the last character from the state and focuses the previous input. When the
     * user enters the last character, the component calls the onCodeFull prop with the code as a string.
     * @param {props}  - props
     */
    function InputCode({ length, onCodeFull, className, onlyNumber, reset }: props): JSX.Element;
    namespace InputCode {
        var defaultPros: {
            onCodeFull: (code: any) => void;
            length: number;
        };
    }
}

// FILE: input.d.tsx
declare namespace ns_input {
    import React = dependency_0;
    import ChangeEvent = dependency_0.ChangeEvent;
    import KeyboardEvent = dependency_0.KeyboardEvent;
    import HTMLAttributes = dependency_0.HTMLAttributes;
    import InputHTMLAttributes = dependency_0.InputHTMLAttributes;
    type props = {
        className?: HTMLAttributes<HTMLInputElement>["className"];
        value?: InputHTMLAttributes<HTMLInputElement>["value"];
        onKeyDown?: (e: KeyboardEvent<HTMLInputElement>) => void;
        onChange?: (e: ChangeEvent<HTMLInputElement>) => void;
        onFocus?: () => void;
    };
    const _default: React.ForwardRefExoticComponent<props & React.RefAttributes<HTMLInputElement>>;
}

export import InputCode = ns_codeinput.InputCode;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };