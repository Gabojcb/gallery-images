/************
Processor: ts
************/

import * as dependency_0 from 'react';

// FILE: area.d.tsx
declare namespace ns_area {
    /// <reference types="react" />
    function Area(): JSX.Element;
}

// FILE: context.d.tsx
declare namespace ns_context {
    import Context = dependency_0.Context;
    import CValue = ns_types.CValue;
    const DragAndDropContext: Context<CValue>;
    const useDragAndDropContext: () => CValue;
}

// FILE: image-config.d.ts
declare namespace ns_imageconfig {
    const ImageConfig: {
        default: string;
        pdf: string;
        png: string;
        css: string;
    };
}

// FILE: imports.d.tsx
declare namespace ns_imports {
    import ReactNode = dependency_0.ReactNode;
    function Imports({ children }: {
        children: ReactNode;
    }): JSX.Element;
}

// FILE: index.d.tsx
declare namespace ns_index {
    import PropsWithChildren = dependency_0.PropsWithChildren;
    import propsIndex = ns_types.propsIndex;
    const DragAndDrop: {
        (props: PropsWithChildren<propsIndex>): JSX.Element;
        defaultProps: {
            clean: boolean;
            textUserPhoto: string;
        };
    };
}

// FILE: message.d.tsx
declare namespace ns_message {
    /// <reference types="react" />
    function Message(): JSX.Element;
}

// FILE: preview.d.tsx
declare namespace ns_preview {
    /// <reference types="react" />
    function Preview(): JSX.Element;
}

// FILE: reducer.d.ts
declare namespace ns_reducer {
    import InitialState = ns_types.InitialState;
    import Payload = ns_types.Payload;
    const reducer: (state: InitialState, payload: Payload) => InitialState;
    const initialState: InitialState;
}

// FILE: types.d.ts
declare namespace ns_types {
    import Dispatch = dependency_0.Dispatch;
    import MutableRefObject = dependency_0.MutableRefObject;
    type propsIndex = {
        count?: number;
        formats?: string[];
        onUpload: (files: File[]) => void;
        clean?: boolean;
        userPhoto?: boolean;
        textUserPhoto?: string;
    };
    type Message = {
        show: boolean;
        text: string | null;
        type: string | null;
    };
    interface InitialState {
        dragging: boolean;
        files: File[];
        message: Message;
        img: string;
    }
    type Payload = {
        case: "hideMessage" | "message" | "files" | "dragging" | "img";
        files?: File[];
        dragging?: boolean;
        show?: boolean;
        text?: string | null;
        type?: string | null;
        img?: string;
    };
    interface CValue {
        files: File[];
        message?: Message;
        count?: number;
        formats?: string[];
        showMessage?: (text: string, type: string, timeout: number) => void;
        dispatch?: Dispatch<Payload>;
        onUpload?: (files: File[]) => void;
        state?: InitialState;
        clean?: boolean;
        drop?: MutableRefObject<HTMLDivElement>;
        drag?: MutableRefObject<HTMLDivElement>;
        userPhoto?: boolean;
        textUserPhoto?: string;
    }
}

// FILE: user-photo.d.tsx
declare namespace ns_userphoto {
    /// <reference types="react" />
    function UserPhoto(): JSX.Element;
}

// FILE: view.d.tsx
declare namespace ns_view {
    import ReactNode = dependency_0.ReactNode;
    function View({ children }: {
        children: ReactNode;
    }): JSX.Element;
}

export import DragAndDrop = ns_index.DragAndDrop;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };