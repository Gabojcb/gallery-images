/************
Processor: ts
************/

import * as dependency_0 from 'react';

// FILE: button.d.tsx
declare namespace ns_button {
    import ReactNode = dependency_0.ReactNode;
    import ButtonHTMLAttributes = dependency_0.ButtonHTMLAttributes;
    interface props extends ButtonHTMLAttributes<HTMLButtonElement> {
        data?: Array<any>;
        label?: ReactNode;
        children?: ReactNode;
        navigate?: string;
        icon?: string;
        loading?: boolean;
        colorSpinner?: string;
    }
    function BeyondButton(props: props): JSX.Element;
}

// FILE: checkbox.d.tsx
declare namespace ns_checkbox {
    import InputHTMLAttributes = dependency_0.InputHTMLAttributes;
    import ForwardRefExoticComponent = dependency_0.ForwardRefExoticComponent;
    import RefAttributes = dependency_0.RefAttributes;
    import HTMLAttributes = dependency_0.HTMLAttributes;
    interface props extends InputHTMLAttributes<HTMLInputElement> {
        className?: HTMLAttributes<HTMLInputElement>["className"];
        label?: string;
    }
    const BeyondCheckbox: ForwardRefExoticComponent<props & RefAttributes<HTMLInputElement>>;
}

// FILE: form.d.tsx
declare namespace ns_form {
    import FormHTMLAttributes = dependency_0.FormHTMLAttributes;
    import PropsWithChildren = dependency_0.PropsWithChildren;
    type props = FormHTMLAttributes<HTMLFormElement>;
    function BeyondForm(props: PropsWithChildren<props>): JSX.Element;
}

// FILE: input.d.tsx
declare namespace ns_input {
    import InputHTMLAttributes = dependency_0.InputHTMLAttributes;
    import ReactNode = dependency_0.ReactNode;
    interface props extends InputHTMLAttributes<HTMLInputElement> {
        ref?: any;
        errorMessage?: string;
        lengthMessage?: string;
        hasError?: boolean;
        icon?: string;
        label?: any;
        children?: ReactNode;
        password?: boolean;
        loading?: boolean;
        colorSpinner?: string;
        max?: string;
    }
    function BeyondInput(props: props): JSX.Element;
}

// FILE: radio.d.tsx
declare namespace ns_radio {
    import InputHTMLAttributes = dependency_0.InputHTMLAttributes;
    import HTMLAttributes = dependency_0.HTMLAttributes;
    interface props extends InputHTMLAttributes<HTMLInputElement> {
        label?: string;
        className?: HTMLAttributes<HTMLDivElement>["className"];
    }
    function BeyondRadio(props: props): JSX.Element;
}

// FILE: switch.d.tsx
declare namespace ns_switch {
    import InputHTMLAttributes = dependency_0.InputHTMLAttributes;
    import ForwardRefExoticComponent = dependency_0.ForwardRefExoticComponent;
    import RefAttributes = dependency_0.RefAttributes;
    import SyntheticEvent = dependency_0.SyntheticEvent;
    import HTMLAttributes = dependency_0.HTMLAttributes;
    interface props extends InputHTMLAttributes<HTMLInputElement> {
        className?: HTMLAttributes<HTMLDivElement>["className"];
        onClick?: (e: SyntheticEvent<HTMLDivElement, Event>) => void;
    }
    const BeyondSwitch: ForwardRefExoticComponent<props & RefAttributes<HTMLInputElement>>;
}

// FILE: textarea.d.tsx
declare namespace ns_textarea {
    import TextareaHTMLAttributes = dependency_0.TextareaHTMLAttributes;
    import ReactNode = dependency_0.ReactNode;
    import HTMLAttributes = dependency_0.HTMLAttributes;
    interface props extends TextareaHTMLAttributes<HTMLTextAreaElement> {
        ref?: any;
        errorMessage?: string;
        max?: string;
        lengthMessage?: string;
        hasError?: boolean;
        className?: HTMLAttributes<HTMLDivElement>["className"];
        label?: any;
        children?: ReactNode;
    }
    function BeyondTextarea(props: props): JSX.Element;
}

export import BeyondButton = ns_button.BeyondButton;
export import BeyondCheckbox = ns_checkbox.BeyondCheckbox;
export import BeyondForm = ns_form.BeyondForm;
export import BeyondInput = ns_input.BeyondInput;
export import BeyondRadio = ns_radio.BeyondRadio;
export import BeyondSwitch = ns_switch.BeyondSwitch;
export import BeyondTextarea = ns_textarea.BeyondTextarea;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };