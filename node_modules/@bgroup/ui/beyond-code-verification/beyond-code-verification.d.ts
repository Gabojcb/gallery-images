/************
Processor: ts
************/

import * as dependency_0 from '@beyond-js/react-widgets/page';
import * as dependency_1 from '@beyond-js/widgets/controller';
import * as dependency_2 from '@bgroup/ui/reactive-model';

// FILE: controller.d.ts
declare namespace ns_controller {
    import PageReactWidgetController = dependency_0.PageReactWidgetController;
    import View = ns_views_index.View;
    import IWidgetStore = dependency_1.IWidgetStore;
    class Controller extends PageReactWidgetController {
        #private;
        get Widget(): typeof View;
        createStore(): IWidgetStore;
        hide(): void;
    }
}

// FILE: model.d.ts
declare namespace ns_model {
    import ReactiveModel = dependency_2.ReactiveModel;
    class Model extends ReactiveModel {
        #private;
        get count(): number;
        hide: () => void;
    }
}

// FILE: views\implementation.d.ts
declare namespace ns_views_implementation {
    const implementation = "\nexport function CodeVerificationImplementation() {\n\n\tconst [code, setCode] = React.useState<string>(\"\");\n\n\tconst onCodeFull = (code: string): void => setCode(code);\n\t\n\treturn (\n\t  <InputCode\n\t\tclassName=\"code-result\"\n\t\tlength={6}\n\t\tonCodeFull={onCodeFull}\n\t\tonlyNumber={false}\n\t  />\n\t);\n}\n";
}

// FILE: views\index.d.tsx
declare namespace ns_views_index {
    /// <reference types="react" />
    function View({ store }: {
        store: any;
    }): JSX.Element;
}

// FILE: views\results.d.tsx
declare namespace ns_views_results {
    /// <reference types="react" />
    function Result({ reset }: {
        reset: any;
    }): JSX.Element;
}

export import Controller = ns_controller.Controller;
export import View = ns_views_index.View;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };