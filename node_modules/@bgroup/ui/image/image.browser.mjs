import * as dependency_0 from '@beyond-js/kernel/bundle';
import * as dependency_1 from 'react';
import * as dependency_2 from '@bgroup/ui/icons';
import * as dependency_3 from '@beyond-js/kernel/styles';

const {Bundle: __Bundle} = dependency_0;
const __pkg = new __Bundle({"module":{"vspecifier":"@bgroup/ui@0.0.34/image"},"type":"code","name":"image"}, import.meta.url).package();;

__pkg.dependencies.update([['react', dependency_1],['@bgroup/ui/icons', dependency_2],['@beyond-js/kernel/styles', dependency_3]]);

brequire('@beyond-js/kernel/styles').styles.register('@bgroup/ui@0.0.34/image')


const ims = new Map();

/***********************
INTERNAL MODULE: ./image
***********************/

ims.set('./image', {hash: 3927941655, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BeyondImage = BeyondImage;
var _react = require("react");
var _icons = require("@bgroup/ui/icons");
;
/**
 * A React component that loads an image from a URL.
 * @param {props} props - props
 */
/*bundle*/function BeyondImage(props) {
  const initialState = {
    size: "200x200",
    loaded: false
  };
  const {
    className,
    onClick,
    children,
    src,
    alt,
    onError
  } = props;
  const [image, setImage] = (0, _react.useState)();
  const [state, setState] = (0, _react.useState)(initialState);
  const onLoad = () => setState({
    ...state,
    error: false,
    htmlLoaded: true
  });
  const loadImage = (url, size) => {
    let finalSrc = url;
    const newImage = new Image();
    newImage.onload = () => setState({
      ...state,
      loaded: true,
      error: false
    });
    newImage.onerror = () => setState({
      ...state,
      error: true,
      loaded: false
    });
    newImage.src = finalSrc;
    setImage(newImage);
    setState({
      ...state,
      url: url,
      size: size,
      src: finalSrc,
      loaded: true
    });
  };
  (0, _react.useEffect)(() => {
    const currentSrc = src;
    if (state.url !== currentSrc) {
      let size = props.size ?? state.size;
      loadImage(currentSrc, size);
    }
    return () => setImage({
      ...state,
      onload: undefined,
      onerror: undefined
    });
    // eslint-disable-next-line
  }, [src]);
  const {
    error,
    loaded,
    htmlLoaded
  } = state;
  let output;
  const onClickError = event => {
    event.stopPropagation();
    if (onError && typeof onError === "function") onError(event);
  };
  let cls = `beyond-element-image ${className ? ` ${className}` : ""}`;
  if (!loaded && !htmlLoaded) cls += " beyond-element-image-preload";
  if (error) cls += " beyond-element-image-error";
  const Error = _react.default.createElement("div", {
    key: "error",
    "data-src": src,
    className: "content-error"
  }, onError && _react.default.createElement(_icons.BeyondIconButton, {
    onClick: onClickError,
    icon: "refresh"
  }));
  const Loaded = _react.default.createElement("img", {
    src: src,
    onLoad: onLoad,
    loading: props.loading ?? "eager",
    alt: alt
  });
  if (error) output = Error;
  if (loaded) output = Loaded;
  const properties = {
    ...props,
    className: cls,
    onClick
  };
  delete properties.src;
  delete properties.alt;
  delete properties.onError;
  delete properties.children;
  delete properties.size;
  delete properties.loading;
  delete properties.error;
  return _react.default.createElement("figure", {
    "data-src": src,
    ...properties
  }, output, children);
}
}});

__pkg.exports.descriptor = [{"im":"./image","from":"BeyondImage","name":"BeyondImage"}];

export let BeyondImage;

// Module exports
__pkg.exports.process = function({require, prop, value}) {
    (require || prop === 'BeyondImage') && (BeyondImage = require ? require('./image').BeyondImage : value);

};
export const __beyond_pkg = __pkg;

export const hmr = new (function () {
    this.on = (event, listener) => void 0;
    this.off = (event, listener) => void 0;
});


__pkg.initialise(ims);
//# sourceMappingURL=image.browser.mjs.map