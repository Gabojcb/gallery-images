System.register(["@beyond-js/kernel/bundle", "@beyond-js/kernel/styles", "react", "@bgroup/ui/toast", "@bgroup/ui/icons", "prism-react-renderer"], function (_export, _context) {
  "use strict";

  var dependency_0, dependency_1, dependency_2, dependency_3, dependency_4, dependency_5, __Bundle, __pkg, ims, CopyableImplementation, __beyond_pkg, hmr;
  _export("CopyableImplementation", void 0);
  return {
    setters: [function (_beyondJsKernelBundle) {
      dependency_0 = _beyondJsKernelBundle;
    }, function (_beyondJsKernelStyles) {
      dependency_1 = _beyondJsKernelStyles;
    }, function (_react) {
      dependency_2 = _react;
    }, function (_bgroupUiToast) {
      dependency_3 = _bgroupUiToast;
    }, function (_bgroupUiIcons) {
      dependency_4 = _bgroupUiIcons;
    }, function (_prismReactRenderer2) {
      dependency_5 = _prismReactRenderer2;
    }],
    execute: function () {
      ({
        Bundle: __Bundle
      } = dependency_0);
      __pkg = new __Bundle({
        "module": {
          "vspecifier": "@bgroup/ui@0.0.34/copyable-implementation"
        },
        "type": "code"
      }, _context.meta.url).package();
      ;
      __pkg.dependencies.update([['@beyond-js/kernel/styles', dependency_1], ['react', dependency_2], ['@bgroup/ui/toast', dependency_3], ['@bgroup/ui/icons', dependency_4], ['prism-react-renderer', dependency_5]]);
      brequire('@beyond-js/kernel/styles').styles.register('@bgroup/ui@0.0.34/copyable-implementation');
      ims = new Map();
      /***********************
      INTERNAL MODULE: ./index
      ***********************/
      ims.set('./index', {
        hash: 1316914604,
        creator: function (require, exports) {
          "use strict";

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.CopyableImplementation = CopyableImplementation;
          var React = require("react");
          var _toast = require("@bgroup/ui/toast");
          var _icons = require("@bgroup/ui/icons");
          var _prismReactRenderer = require("prism-react-renderer");
          /*bundle*/
          function CopyableImplementation({
            children
          }) {
            function copy() {
              navigator.clipboard.writeText(children);
              _toast.toast.success('Copied implementation');
            }
            return React.createElement("div", {
              className: "copyable-content"
            }, React.createElement("div", {
              className: "code"
            }, React.createElement(_prismReactRenderer.default, {
              ..._prismReactRenderer.defaultProps,
              code: children,
              language: "jsx"
            }, ({
              className,
              style,
              tokens,
              getLineProps,
              getTokenProps
            }) => React.createElement("code", {
              className: className,
              style: style
            }, tokens.map((line, i) => React.createElement("div", {
              ...getLineProps({
                line,
                key: i
              })
            }, line.map((token, key) => React.createElement("span", {
              ...getTokenProps({
                token,
                key
              })
            }))))))), React.createElement(_icons.BeyondIconButton, {
              icon: "copy",
              onClick: copy,
              className: "copy-button"
            }));
          }
        }
      });
      __pkg.exports.descriptor = [{
        "im": "./index",
        "from": "CopyableImplementation",
        "name": "CopyableImplementation"
      }];
      // Module exports
      __pkg.exports.process = function ({
        require,
        prop,
        value
      }) {
        (require || prop === 'CopyableImplementation') && _export("CopyableImplementation", CopyableImplementation = require ? require('./index').CopyableImplementation : value);
      };
      _export("__beyond_pkg", __beyond_pkg = __pkg);
      _export("hmr", hmr = new function () {
        this.on = (event, listener) => void 0;
        this.off = (event, listener) => void 0;
      }());
      __pkg.initialise(ims);
    }
  };
});
//# sourceMappingURL=copyable-implementation.sjs.js.map