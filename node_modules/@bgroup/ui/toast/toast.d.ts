/************
Processor: ts
************/

import * as dependency_0 from 'react';
import * as dependency_1 from '@bgroup/ui/reactive-model';

// FILE: index.d.tsx
declare namespace ns_index {
    import HTMLAttributes = dependency_0.HTMLAttributes;
    interface Props extends HTMLAttributes<HTMLDivElement> {
        className: string;
        position: Partial<IPosition>;
    }
    interface IPosition {
        top: string;
        left: string;
        right: string;
        bottom: string;
    }
    function Toasts({ position, className, ...props }: Partial<Props>): JSX.Element;
}

// FILE: model.d.ts
declare namespace ns_model {
    import ReactiveModel = dependency_1.ReactiveModel;
    type ToastTypes = "success" | "error" | "info" | "loading" | "warning";
    interface IToast {
        id: string;
        message: string;
        type: ToastTypes;
        duration?: number;
    }
    class Toast extends ReactiveModel {
        #private;
        get current(): Array<IToast | undefined>;
        set current(newValue: Array<IToast | undefined>);
        constructor();
        remove(toastId: string): void;
        success(message: string, duration?: number): string;
        error(message: string, duration?: number): string;
        warning(message: string, duration?: number): string;
        info(message: string, duration?: number): string;
        loading(message: string, duration?: number): string;
    }
    const toast: Toast;
}

// FILE: toast.d.tsx
declare namespace ns_toast {
    import ToastTypes = ns_model.ToastTypes;
    interface Props {
        key: string;
        type: ToastTypes;
        message: string;
        duration?: number;
        id: string;
    }
    function Toast({ type, message, duration, id }: Props): JSX.Element;
}

export import Toasts = ns_index.Toasts;
export import ToastTypes = ns_model.ToastTypes;
export import IToast = ns_model.IToast;
export import toast = ns_model.toast;
export import Toast = ns_toast.Toast;


export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };